PSEUDOCODE: Library Book Filter

CLASS Book:
    ATTRIBUTES:
        - isbn (String)
        - title (String)
        - author (String)
        - publishYear (Integer)
        - rating (Double)
        - genre (String)
        - pages (Integer)
    
    CONSTRUCTOR Book(isbn, title, author, publishYear, rating, genre, pages):
        SET this.isbn = isbn
        SET this.title = title
        SET this.author = author
        SET this.publishYear = publishYear
        SET this.rating = rating
        SET this.genre = genre
        SET this.pages = pages
    
    METHOD toString():
        RETURN title + " by " + author + " (" + publishYear + ") - Rating: " + rating + "/5.0"

CLASS LibraryBookFilter:
    ATTRIBUTES:
        - books (List<Book>)
    
    CONSTRUCTOR LibraryBookFilter():
        INITIALIZE books as empty list
    
    METHOD addBook(book):
        ADD book to books
        PRINT "Added book: " + book.title
    
    METHOD filterBooksAfter2015WithHighRating():
        PRINT "Books published after 2015 with rating > 4.5:"
        
        // Using Stream filters and lambdas
        SET filteredBooks = books.stream()
                                 .filter(book -> book.publishYear > 2015)
                                 .filter(book -> book.rating > 4.5)
                                 .collect(toList())
        
        IF filteredBooks is empty:
            PRINT "No books match the criteria"
        ELSE:
            FOR each book in filteredBooks:
                PRINT "  " + book.toString()
        
        RETURN filteredBooks
    
    METHOD filterByGenre(genre):
        PRINT "Books in " + genre + " genre:"
        
        SET genreBooks = books.stream()
                             .filter(book -> book.genre.equalsIgnoreCase(genre))
                             .collect(toList())
        
        FOR each book in genreBooks:
            PRINT "  " + book.toString()
        
        RETURN genreBooks
    
    METHOD getTopRatedBooks(minRating):
        PRINT "Books with rating >= " + minRating + ":"
        
        SET topRated = books.stream()
                           .filter(book -> book.rating >= minRating)
                           .sorted((b1, b2) -> Double.compare(b2.rating, b1.rating)) // Descending order
                           .collect(toList())
        
        FOR each book in topRated:
            PRINT "  " + book.toString()
        
        RETURN topRated
    
    METHOD getRecentBooks(fromYear):
        PRINT "Books published from " + fromYear + " onwards:"
        
        SET recentBooks = books.stream()
                              .filter(book -> book.publishYear >= fromYear)
                              .sorted((b1, b2) -> Integer.compare(b2.publishYear, b1.publishYear)) // Latest first
                              .collect(toList())
        
        FOR each book in recentBooks:
            PRINT "  " + book.toString()
        
        RETURN recentBooks
    
    METHOD getBooksByAuthor(authorName):
        PRINT "Books by " + authorName + ":"
        
        SET authorBooks = books.stream()
                              .filter(book -> book.author.toLowerCase().contains(authorName.toLowerCase()))
                              .collect(toList())
        
        FOR each book in authorBooks:
            PRINT "  " + book.toString()
        
        RETURN authorBooks
    
    METHOD getStatistics():
        PRINT "=== Library Statistics ==="
        PRINT "Total books: " + books.size()
        
        // Average rating
        SET avgRating = books.stream()
                            .mapToDouble(book -> book.rating)
                            .average()
                            .orElse(0.0)
        PRINT "Average rating: " + String.format("%.2f", avgRating)
        
        // Books by decade
        SET booksAfter2010 = books.stream()
                                  .filter(book -> book.publishYear > 2010)
                                  .count()
        PRINT "Books published after 2010: " + booksAfter2010
        
        // Highest rated book
        SET highestRated = books.stream()
                               .max((b1, b2) -> Double.compare(b1.rating, b2.rating))
                               .orElse(null)
        IF highestRated is not null:
            PRINT "Highest rated book: " + highestRated.toString()
    
    METHOD displayAllBooks():
        PRINT "All Books in Library:"
        FOR each book in books:
            PRINT "  " + book.toString()

MAIN METHOD:
    CREATE library = new LibraryBookFilter()
    
    PRINT "=== Library Book Filter System ==="
    
    // Add sample books
    CALL library.addBook(Book("978-1", "The Alchemist", "Paulo Coelho", 2014, 4.3, "Fiction", 163))
    CALL library.addBook(Book("978-2", "Educated", "Tara Westover", 2018, 4.7, "Memoir", 334))
    CALL library.addBook(Book("978-3", "Atomic Habits", "James Clear", 2018, 4.8, "Self-Help", 320))
    CALL library.addBook(Book("978-4", "The Silent Patient", "Alex Michaelides", 2019, 4.6, "Thriller", 336))
    CALL library.addBook(Book("978-5", "Becoming", "Michelle Obama", 2018, 4.9, "Biography", 448))
    CALL library.addBook(Book("978-6", "Where the Crawdads Sing", "Delia Owens", 2018, 4.4, "Fiction", 384))
    CALL library.addBook(Book("978-7", "The Seven Husbands", "Taylor Jenkins Reid", 2017, 4.5, "Fiction", 400))
    CALL library.addBook(Book("978-8", "Sapiens", "Yuval Noah Harari", 2011, 4.4, "History", 443))
    
    PRINT newline
    CALL library.displayAllBooks()
    
    PRINT newline
    // Main filter: Books after 2015 with rating > 4.5
    SET mainResults = library.filterBooksAfter2015WithHighRating()
    
    PRINT newline
    // Additional filters
    CALL library.filterByGenre("Fiction")
    
    PRINT newline
    CALL library.getTopRatedBooks(4.7)
    
    PRINT newline
    CALL library.getRecentBooks(2018)
    
    PRINT newline
    CALL library.getBooksByAuthor("Obama")
    
    PRINT newline
    CALL library.getStatistics()