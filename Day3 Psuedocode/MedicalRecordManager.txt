PSEUDOCODE: Medical Record Manager

INTERFACE Searchable:
    METHOD search(criteria): List<Record>

INTERFACE Printable:
    METHOD print(): String
    METHOD printSummary(): String

CLASS Patient:
    ATTRIBUTES:
        - id (String)
        - name (String)
        - age (Integer)
        - bloodType (String)
    
    CONSTRUCTOR Patient(id, name, age, bloodType):
        SET this.id = id
        SET this.name = name
        SET this.age = age
        SET this.bloodType = bloodType

ABSTRACT CLASS MedicalRecord IMPLEMENTS Searchable, Printable:
    ATTRIBUTES:
        - recordId (String)
        - patient (Patient)
        - date (Date)
        - doctor (String)
    
    CONSTRUCTOR MedicalRecord(recordId, patient, date, doctor):
        SET this.recordId = recordId
        SET this.patient = patient
        SET this.date = date
        SET this.doctor = doctor
    
    ABSTRACT METHOD getRecordType(): String
    ABSTRACT METHOD getDetails(): String

CLASS DiagnosisReport EXTENDS MedicalRecord:
    ATTRIBUTES:
        - diagnosis (String)
        - symptoms (List<String>)
        - severity (String)
    
    CONSTRUCTOR DiagnosisReport(recordId, patient, date, doctor, diagnosis, symptoms, severity):
        CALL super(recordId, patient, date, doctor)
        SET this.diagnosis = diagnosis
        SET this.symptoms = symptoms
        SET this.severity = severity
    
    METHOD getRecordType():
        RETURN "DIAGNOSIS"
    
    METHOD getDetails():
        RETURN "Diagnosis: " + diagnosis + " | Severity: " + severity + " | Symptoms: " + symptoms
    
    METHOD search(criteria):
        CREATE results as empty list
        IF criteria contains diagnosis OR criteria contains severity:
            ADD this to results
        RETURN results
    
    METHOD print():
        RETURN "=== DIAGNOSIS REPORT ===\n" +
               "Record ID: " + recordId + "\n" +
               "Patient: " + patient.name + " (ID: " + patient.id + ")\n" +
               "Date: " + date + "\n" +
               "Doctor: " + doctor + "\n" +
               getDetails()
    
    METHOD printSummary():
        RETURN patient.name + " - " + diagnosis + " (" + severity + ")"

CLASS LabReport EXTENDS MedicalRecord:
    ATTRIBUTES:
        - testType (String)
        - results (Map<String, String>)
        - normalRange (String)
    
    CONSTRUCTOR LabReport(recordId, patient, date, doctor, testType, results, normalRange):
        CALL super(recordId, patient, date, doctor)
        SET this.testType = testType
        SET this.results = results
        SET this.normalRange = normalRange
    
    METHOD getRecordType():
        RETURN "LAB_REPORT"
    
    METHOD getDetails():
        RETURN "Test: " + testType + " | Results: " + results + " | Normal Range: " + normalRange
    
    METHOD search(criteria):
        CREATE results as empty list
        IF criteria contains testType:
            ADD this to results
        RETURN results
    
    METHOD print():
        RETURN "=== LAB REPORT ===\n" +
               "Record ID: " + recordId + "\n" +
               "Patient: " + patient.name + " (ID: " + patient.id + ")\n" +
               "Date: " + date + "\n" +
               "Doctor: " + doctor + "\n" +
               getDetails()
    
    METHOD printSummary():
        RETURN patient.name + " - " + testType + " Test"

CLASS PrescriptionReport EXTENDS MedicalRecord:
    ATTRIBUTES:
        - medications (List<String>)
        - dosage (Map<String, String>)
        - duration (String)
    
    CONSTRUCTOR PrescriptionReport(recordId, patient, date, doctor, medications, dosage, duration):
        CALL super(recordId, patient, date, doctor)
        SET this.medications = medications
        SET this.dosage = dosage
        SET this.duration = duration
    
    METHOD getRecordType():
        RETURN "PRESCRIPTION"
    
    METHOD getDetails():
        RETURN "Medications: " + medications + " | Duration: " + duration
    
    METHOD search(criteria):
        CREATE results as empty list
        FOR each medication in medications:
            IF criteria contains medication:
                ADD this to results
                BREAK
        RETURN results
    
    METHOD print():
        RETURN "=== PRESCRIPTION ===\n" +
               "Record ID: " + recordId + "\n" +
               "Patient: " + patient.name + " (ID: " + patient.id + ")\n" +
               "Date: " + date + "\n" +
               "Doctor: " + doctor + "\n" +
               getDetails()
    
    METHOD printSummary():
        RETURN patient.name + " - Prescription (" + medications.size() + " medications)"

CLASS MedicalRecordManager:
    ATTRIBUTES:
        - records (List<MedicalRecord>)
    
    CONSTRUCTOR MedicalRecordManager():
        INITIALIZE records as empty list
    
    METHOD addRecord(record):
        ADD record to records
        PRINT "Added " + record.getRecordType() + " for " + record.patient.name
    
    METHOD searchRecords(criteria):
        CREATE searchResults as empty list
        FOR each record in records:
            SET results = record.search(criteria)
            ADD ALL results to searchResults
        RETURN searchResults
    
    METHOD printAllRecords():
        FOR each record in records:
            PRINT record.print()
            PRINT newline
    
    METHOD printSummaries():
        FOR each record in records:
            PRINT record.printSummary()

MAIN METHOD:
    CREATE manager = new MedicalRecordManager()
    CREATE patient = Patient("P001", "John Doe", 35, "O+")
    
    PRINT "=== Medical Record Manager ==="
    
    // Create different types of reports using polymorphism
    CREATE diagnosisReport = DiagnosisReport("D001", patient, "2024-12-25", "Dr. Smith", 
                                           "Hypertension", ["headache", "dizziness"], "Moderate")
    CREATE labReport = LabReport("L001", patient, "2024-12-24", "Dr. Johnson", 
                               "Blood Test", {"BP": "140/90", "Sugar": "110"}, "120/80, 70-100")
    CREATE prescriptionReport = PrescriptionReport("P001", patient, "2024-12-25", "Dr. Smith",
                                                  ["Lisinopril", "Metformin"], 
                                                  {"Lisinopril": "10mg daily", "Metformin": "500mg twice daily"}, 
                                                  "30 days")
    
    // Add records
    CALL manager.addRecord(diagnosisReport)
    CALL manager.addRecord(labReport)
    CALL manager.addRecord(prescriptionReport)
    
    PRINT "\nAll Records Summary:"
    CALL manager.printSummaries()
    
    PRINT "\nSearching for 'Hypertension':"
    SET searchResults = manager.searchRecords("Hypertension")
    FOR each result in searchResults:
        PRINT result.printSummary()
    
    PRINT "\nFull Report for Diagnosis:"
    PRINT diagnosisReport.print()