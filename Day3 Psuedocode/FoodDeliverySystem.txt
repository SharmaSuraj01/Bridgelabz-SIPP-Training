PSEUDOCODE: Food Delivery System

CLASS Customer:
    ATTRIBUTES:
        - id (String)
        - name (String)
        - phone (String)
        - address (String)
    
    CONSTRUCTOR Customer(id, name, phone, address):
        SET this.id = id
        SET this.name = name
        SET this.phone = phone
        SET this.address = address
    
    METHOD toString():
        RETURN "Customer: " + name + " (" + phone + ") - " + address

CLASS Restaurant:
    ATTRIBUTES:
        - id (String)
        - name (String)
        - cuisine (String)
        - rating (Double)
        - preparationTime (Integer) // minutes
    
    CONSTRUCTOR Restaurant(id, name, cuisine, rating, preparationTime):
        SET this.id = id
        SET this.name = name
        SET this.cuisine = cuisine
        SET this.rating = rating
        SET this.preparationTime = preparationTime
    
    METHOD toString():
        RETURN "Restaurant: " + name + " (" + cuisine + ") - Rating: " + rating

CLASS DeliveryBoy:
    ATTRIBUTES:
        - id (String)
        - name (String)
        - phone (String)
        - vehicleType (String)
        - isAvailable (Boolean)
    
    CONSTRUCTOR DeliveryBoy(id, name, phone, vehicleType):
        SET this.id = id
        SET this.name = name
        SET this.phone = phone
        SET this.vehicleType = vehicleType
        SET this.isAvailable = true
    
    METHOD assignDelivery():
        SET isAvailable = false
    
    METHOD completeDelivery():
        SET isAvailable = true
    
    METHOD toString():
        RETURN "Delivery Boy: " + name + " (" + vehicleType + ") - " + 
               (isAvailable ? "Available" : "Busy")

CLASS Order:
    ATTRIBUTES:
        - orderId (String)
        - customer (Customer) // Composition
        - restaurant (Restaurant) // Composition
        - deliveryBoy (DeliveryBoy) // Composition
        - items (List<String>)
        - totalAmount (Double)
        - status (String)
        - orderTime (DateTime)
    
    CONSTRUCTOR Order(orderId, customer, restaurant):
        SET this.orderId = orderId
        SET this.customer = customer
        SET this.restaurant = restaurant
        SET this.deliveryBoy = null
        INITIALIZE items as empty list
        SET totalAmount = 0.0
        SET status = "PLACED"
        SET orderTime = getCurrentTime()
    
    METHOD addItem(item, price):
        ADD item to items
        SET totalAmount += price
    
    METHOD assignDeliveryBoy(deliveryBoy):
        IF deliveryBoy.isAvailable:
            SET this.deliveryBoy = deliveryBoy
            CALL deliveryBoy.assignDelivery()
            SET status = "ASSIGNED"
            PRINT "Delivery boy assigned: " + deliveryBoy.name
        ELSE:
            PRINT "Delivery boy not available"
    
    METHOD updateStatus(newStatus):
        SET status = newStatus
        PRINT "Order " + orderId + " status updated to: " + status
    
    METHOD completeOrder():
        SET status = "DELIVERED"
        IF deliveryBoy is not null:
            CALL deliveryBoy.completeDelivery()
    
    METHOD displayOrderDetails():
        PRINT "Order ID: " + orderId
        PRINT customer.toString()
        PRINT restaurant.toString()
        IF deliveryBoy is not null:
            PRINT deliveryBoy.toString()
        PRINT "Items: " + items
        PRINT "Total Amount: $" + totalAmount
        PRINT "Status: " + status

MAIN METHOD:
    PRINT "=== Food Delivery System ==="
    
    // Create objects using composition
    CREATE customer = Customer("C001", "John Doe", "123-456-7890", "123 Main St")
    CREATE restaurant = Restaurant("R001", "Pizza Palace", "Italian", 4.5, 25)
    CREATE deliveryBoy = DeliveryBoy("D001", "Mike Wilson", "987-654-3210", "Bike")
    
    // Create order with composition
    CREATE order = Order("ORD001", customer, restaurant)
    
    // Add items to order
    CALL order.addItem("Margherita Pizza", 12.99)
    CALL order.addItem("Garlic Bread", 4.99)
    CALL order.addItem("Coke", 2.99)
    
    // Process order
    CALL order.displayOrderDetails()
    CALL order.assignDeliveryBoy(deliveryBoy)
    CALL order.updateStatus("PREPARING")
    CALL order.updateStatus("OUT_FOR_DELIVERY")
    CALL order.completeOrder()
    
    PRINT newline
    CALL order.displayOrderDetails()