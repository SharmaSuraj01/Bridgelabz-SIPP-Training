PSEUDOCODE: Payment Processor

ABSTRACT CLASS PaymentMethod:
    ATTRIBUTES:
        - accountId (String)
        - balance (Double)
    
    CONSTRUCTOR PaymentMethod(accountId, balance):
        SET this.accountId = accountId
        SET this.balance = balance
    
    ABSTRACT METHOD processPayment(amount): Boolean
    ABSTRACT METHOD getPaymentType(): String
    
    METHOD hasSufficientBalance(amount):
        RETURN balance >= amount
    
    METHOD deductAmount(amount):
        SET balance -= amount

CLASS UPIPayment EXTENDS PaymentMethod:
    ATTRIBUTES:
        - upiId (String)
        - pin (String)
    
    CONSTRUCTOR UPIPayment(accountId, balance, upiId, pin):
        CALL super(accountId, balance)
        SET this.upiId = upiId
        SET this.pin = pin
    
    METHOD processPayment(amount):
        IF hasSufficientBalance(amount):
            CALL deductAmount(amount)
            PRINT "UPI Payment of $" + amount + " processed via " + upiId
            RETURN true
        ELSE:
            PRINT "Insufficient balance for UPI payment"
            RETURN false
    
    METHOD getPaymentType():
        RETURN "UPI"

CLASS CardPayment EXTENDS PaymentMethod:
    ATTRIBUTES:
        - cardNumber (String)
        - expiryDate (String)
        - cvv (String)
        - cardType (String) // "CREDIT" or "DEBIT"
    
    CONSTRUCTOR CardPayment(accountId, balance, cardNumber, expiryDate, cvv, cardType):
        CALL super(accountId, balance)
        SET this.cardNumber = cardNumber
        SET this.expiryDate = expiryDate
        SET this.cvv = cvv
        SET this.cardType = cardType
    
    METHOD processPayment(amount):
        IF cardType equals "CREDIT" OR hasSufficientBalance(amount):
            IF cardType equals "DEBIT":
                CALL deductAmount(amount)
            PRINT cardType + " Card Payment of $" + amount + " processed"
            PRINT "Card: ****" + cardNumber.substring(cardNumber.length()-4)
            RETURN true
        ELSE:
            PRINT "Insufficient balance for debit card payment"
            RETURN false
    
    METHOD getPaymentType():
        RETURN cardType + "_CARD"

CLASS NetBankingPayment EXTENDS PaymentMethod:
    ATTRIBUTES:
        - bankName (String)
        - loginId (String)
        - password (String)
    
    CONSTRUCTOR NetBankingPayment(accountId, balance, bankName, loginId, password):
        CALL super(accountId, balance)
        SET this.bankName = bankName
        SET this.loginId = loginId
        SET this.password = password
    
    METHOD processPayment(amount):
        IF hasSufficientBalance(amount):
            CALL deductAmount(amount)
            PRINT "Net Banking Payment of $" + amount + " processed via " + bankName
            RETURN true
        ELSE:
            PRINT "Insufficient balance for net banking payment"
            RETURN false
    
    METHOD getPaymentType():
        RETURN "NET_BANKING"

GENERIC CLASS Transaction<T extends PaymentMethod>:
    ATTRIBUTES:
        - transactionId (String)
        - paymentMethod (T)
        - amount (Double)
        - timestamp (DateTime)
        - status (String) // "SUCCESS", "FAILED", "PENDING"
        - description (String)
    
    CONSTRUCTOR Transaction(transactionId, paymentMethod, amount, description):
        SET this.transactionId = transactionId
        SET this.paymentMethod = paymentMethod
        SET this.amount = amount
        SET this.description = description
        SET this.timestamp = getCurrentTime()
        SET this.status = "PENDING"
    
    METHOD processTransaction():
        PRINT "Processing transaction: " + transactionId
        PRINT "Amount: $" + amount + " | Method: " + paymentMethod.getPaymentType()
        PRINT "Description: " + description
        
        IF paymentMethod.processPayment(amount):
            SET status = "SUCCESS"
            PRINT "Transaction " + transactionId + " completed successfully"
        ELSE:
            SET status = "FAILED"
            PRINT "Transaction " + transactionId + " failed"
        
        RETURN status.equals("SUCCESS")
    
    METHOD getTransactionDetails():
        RETURN "Transaction{ID: " + transactionId + ", Amount: $" + amount + 
               ", Method: " + paymentMethod.getPaymentType() + ", Status: " + status + 
               ", Time: " + timestamp + "}"

CLASS PaymentProcessor:
    ATTRIBUTES:
        - transactions (List<Transaction<? extends PaymentMethod>>)
    
    CONSTRUCTOR PaymentProcessor():
        INITIALIZE transactions as empty list
    
    GENERIC METHOD <T extends PaymentMethod> processPayment(transaction):
        ADD transaction to transactions
        SET success = transaction.processTransaction()
        PRINT newline
        RETURN success
    
    METHOD generateReport():
        PRINT "=== Payment Processing Report ==="
        PRINT "Total transactions: " + transactions.size()
        
        SET successCount = 0
        SET failedCount = 0
        SET totalAmount = 0.0
        
        FOR each transaction in transactions:
            IF transaction.status equals "SUCCESS":
                INCREMENT successCount
                SET totalAmount += transaction.amount
            ELSE:
                INCREMENT failedCount
        
        PRINT "Successful: " + successCount
        PRINT "Failed: " + failedCount
        PRINT "Total amount processed: $" + totalAmount
        
        PRINT "\nTransaction Details:"
        FOR each transaction in transactions:
            PRINT "  " + transaction.getTransactionDetails()

MAIN METHOD:
    CREATE processor = new PaymentProcessor()
    
    PRINT "=== Payment Processor System ==="
    
    // Create different payment methods
    CREATE upiPayment = UPIPayment("ACC001", 1000.0, "user@paytm", "1234")
    CREATE creditCard = CardPayment("ACC002", 500.0, "1234567890123456", "12/25", "123", "CREDIT")
    CREATE debitCard = CardPayment("ACC003", 800.0, "9876543210987654", "10/24", "456", "DEBIT")
    CREATE netBanking = NetBankingPayment("ACC004", 1200.0, "HDFC Bank", "user123", "pass456")
    
    // Create transactions with type safety
    CREATE upiTransaction = Transaction<UPIPayment>("TXN001", upiPayment, 250.0, "Online Shopping")
    CREATE creditTransaction = Transaction<CardPayment>("TXN002", creditCard, 1500.0, "Hotel Booking")
    CREATE debitTransaction = Transaction<CardPayment>("TXN003", debitCard, 300.0, "Grocery Purchase")
    CREATE netBankingTransaction = Transaction<NetBankingPayment>("TXN004", netBanking, 750.0, "Utility Bill")
    
    // Process transactions
    CALL processor.processPayment(upiTransaction)
    CALL processor.processPayment(creditTransaction)
    CALL processor.processPayment(debitTransaction)
    CALL processor.processPayment(netBankingTransaction)
    
    // Try a transaction that should fail (insufficient balance)
    CREATE failTransaction = Transaction<UPIPayment>("TXN005", upiPayment, 900.0, "Large Purchase")
    CALL processor.processPayment(failTransaction)
    
    // Generate report
    CALL processor.generateReport()